syntax = "proto3";
package axii;
option go_package = "github.com/impeccableai/impeccable/proto/axii";

import "proto/workflow/workflow.proto";
import "proto/system/secrets.proto";
import "proto/common/entities.proto";
import "proto/common/validation.proto";
import "proto/store/store.proto";

message CreateWorkflowAndRunRequest {
  workflow.Workflow workflow = 1;
}

message CreateWorkflowAndRunResponse {
  string workflow_uuid = 1;
  string execution_id = 2;
  workflow.Workflow workflow = 3;
}

message SubmitDraftRequest {
  workflow.Draft draft = 1;
}

message SubmitDraftResponse {
  string template_uuid = 1;
  string experiment_uuid = 2;
}

message CancelExperimentRequest {
  string experiment_uuid = 1;
}

message CancelExperimentResponse {}

message CloneExperimentRequest {
  string experiment_uuid = 1;
}

message CloneExperimentResponse {
  string draft_uuid = 1;
}

message CreateRecurringExperimentFromExperimentRequest {
  workflow.RecurringExperiment recurring_experiment = 1;
  string experiment_uuid = 2;
}

message CreateRecurringExperimentFromExperimentResponse {
  workflow.RecurringExperiment recurring_experiment = 1;
}

message EvalParametersRequest {
  map<string, string> parameters = 1;
}

message EvalParametersResponse {
  map<string, string> evaluated_parameters = 1;
  bool parameters_valid = 2;
}

message SubmitServiceRequest {
  workflow.Service service = 1;
}

message SubmitServiceResponse {
  workflow.ServiceStatus status = 1;
}

message StartServiceRequest {
  string service_uuid = 1;
}

message StartServiceResponse {
  workflow.ServiceStatus status = 1;
}

message PauseServiceRequest {
  string service_uuid = 1;
}

message PauseServiceResponse {
  workflow.ServiceStatus status = 1;
}

message DeleteServiceRequest {
  string service_uuid = 1;
}

message DeleteServiceResponse {
  bool deleted = 1;
}

message ImportDraftRequest {
  workflow.Draft draft = 1;
  repeated system.Secret secrets = 2;
  repeated common.ConfigSet config_sets = 3;
  repeated workflow.Task tasks = 4;
  repeated workflow.DataSource data_sources = 5;
  reserved 6 to 19;
  string secret_encryption_key = 20;
}

message ImportDraftResponse {
  string draft_uuid = 1;
}

message ExportDraftRequest {
  string draft_uuid = 1;
  string secret_encryption_key = 2;
}

message ExportDraftResponse {
  string object_uuid = 1;
}

message ImportNamedWorkflowTemplateRequest {
  workflow.NamedWorkflowTemplate named_workflow_template = 1;
  workflow.WorkflowTemplate workflow_template = 2;
  repeated system.Secret secrets = 3;
  repeated common.ConfigSet config_sets = 4;
  repeated workflow.Task tasks = 5;
  repeated workflow.DataSource data_sources = 6;
  reserved 7 to 19;
  string secret_encryption_key = 20;
}

message ImportNamedWorkflowTemplateResponse {
  string named_workflow_template_uuid = 1;
}

message ExportNamedWorkflowTemplateRequest {
  oneof id {
    string uuid = 1;
    store.GetNamedWorkflowTemplateRequest.NameVersion name = 2;
  }
  string secret_encryption_key = 3;
}

message ExportNamedWorkflowTemplateResponse {
  string object_uuid = 1;
}

message SubmitNamedWorkflowTemplateRequest {
  string template_name = 1;
  string template_version = 2;
  workflow.WorkflowTemplate.Parameters parameters = 3;
}

message SubmitNamedWorkflowTemplateResponse {
  string experiment_uuid = 1;
}

message ImportTaskRequest {
  workflow.Task task = 1;
  repeated system.Secret secrets = 2;
  repeated common.ConfigSet config_sets = 3;
  reserved 4 to 19;
  string secret_encryption_key = 20;
}

message ImportTaskResponse {
  string task_uuid = 1;
}

message ExportTaskRequest {
  string task_uuid = 1;
  string secret_encryption_key = 2;
}

message ExportTaskResponse {
  string object_uuid = 1;
}

message ImportDataSourceRequest {
  workflow.DataSource data_source = 1;
}

message ImportDataSourceResponse {
  string data_source_uuid = 1;
}

message ExportDataSourceRequest {
  string data_source_uuid = 1;
}

message ExportDataSourceResponse {
  string object_uuid = 1;
}

message ValidateDraftRequest {
  workflow.Draft draft = 1;
}

message ValidateDraftResponse {
  repeated common.ValidationMessage messages = 1;
}

message ValidateTaskRequest {
  workflow.Task task = 1;
}

message ValidateTaskResponse {
  repeated common.ValidationMessage messages = 1;
}

message ValidateDataSourceRequest {
  workflow.DataSource data_source = 1;
}

message ValidateDataSourceResponse {
  repeated common.ValidationMessage messages = 1;
}

service Axii {
  rpc CloneExperiment(CloneExperimentRequest) returns (CloneExperimentResponse);
  rpc SubmitDraft(SubmitDraftRequest) returns (SubmitDraftResponse);
  rpc CancelExperiment(CancelExperimentRequest) returns (CancelExperimentResponse);

  rpc CreateRecurringExperimentFromExperiment(CreateRecurringExperimentFromExperimentRequest) returns (CreateRecurringExperimentFromExperimentResponse);

  rpc EvalParameters(EvalParametersRequest) returns (EvalParametersResponse);

  rpc SubmitService(SubmitServiceRequest) returns (SubmitServiceResponse);
  rpc StartService(StartServiceRequest) returns (StartServiceResponse);
  rpc PauseService(PauseServiceRequest) returns (PauseServiceResponse);
  rpc DeleteService(DeleteServiceRequest) returns (DeleteServiceResponse);

  rpc ImportDraft(ImportDraftRequest) returns (ImportDraftResponse);
  rpc ExportDraft(ExportDraftRequest) returns (ExportDraftResponse);

  rpc ImportNamedWorkflowTemplate(ImportNamedWorkflowTemplateRequest) returns (ImportNamedWorkflowTemplateResponse);
  rpc ExportNamedWorkflowTemplate(ExportNamedWorkflowTemplateRequest) returns (ExportNamedWorkflowTemplateResponse);
  rpc SubmitNamedWorkflowTemplate(SubmitNamedWorkflowTemplateRequest) returns (SubmitNamedWorkflowTemplateResponse);

  rpc ImportTask(ImportTaskRequest) returns (ImportTaskResponse);
  rpc ExportTask(ExportTaskRequest) returns (ExportTaskResponse);

  rpc ImportDataSource(ImportDataSourceRequest) returns (ImportDataSourceResponse);
  rpc ExportDataSource(ExportDataSourceRequest) returns (ExportDataSourceResponse);

  rpc ValidateDraft(ValidateDraftRequest) returns (ValidateDraftResponse);
  rpc ValidateTask(ValidateTaskRequest) returns (ValidateTaskResponse);
  rpc ValidateDataSource(ValidateDataSourceRequest) returns (ValidateDataSourceResponse);
}